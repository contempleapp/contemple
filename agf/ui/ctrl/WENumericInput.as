package agf.ui.ctrl{	import flash.display.InteractiveObject;	import flash.display.Sprite;	import flash.events.ContextMenuEvent;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.ui.ContextMenu;	import flash.ui.ContextMenuBuiltInItems;	import flash.ui.ContextMenuItem;		import agf.ui.ctrl.UiCtrl;	import agf.icons.SliderIcon;	import agf.icons.NumericInputIcon;	import agf.utils.StringMath;		dynamic public class WENumericInput extends UiCtrl 	{			public static var EVT_CHANGE:String = "evtChange";				public function WENumericInput () {			initialize();		}					public static const UNIT_NONE:int = 0;		public static const UNIT_PERCENT:int = 1;		public static const UNIT_DEGREE:int = 2;		public static const UNIT_METRIC:int = 3;		public static const UNIT_SEC:int = 4;				public static var CHAR_SEC:String = " s";		public static var CHAR_METRIC:String = " m";		public static var CHAR_DEGREE:String = String.fromCharCode(176);//" °";		public static var CHAR_PERCENT:String = " %";		public static var CHAR_NONE:String = "";						public var unit:int = 0;		public var precision:int = 3;				public var minValue:Number = 0;		public var maxValue:Number = 100;		public var forceRestrict:Boolean=false;		public var tf:TextField;		public var bg:Sprite;		public var btn:WEButton;		public var factor_btn:WEButton;		public var scaleOffset:Number = 1;				private var lastX:Number=0;		private var lastY:Number=0;				protected var _displaySlideButton:Boolean=true;		public function get displaySlideButton ():Boolean {  return _displaySlideButton; }		public function set displaySlideButton (v:Boolean) :void {			if(_displaySlideButton == v) return;			_displaySlideButton = v;			initialize();		}				protected var _textAlign:String="left";		public function set textAlign (v:String) :void {			if(v == _textAlign) return;			_textAlign = v;			if(_textAlign == "left") {				tf.defaultTextFormat = _enabled ? UiCtrl.defaultInputTextFmtLeft : UiCtrl.disabledInputTextFmtLeft;			}else{				// right				tf.defaultTextFormat = _enabled ? UiCtrl.defaultInputTextFmt : UiCtrl.disabledInputTextFmt;			}		}				public function get textAlign () :String {			return _textAlign;		}				public override function set enabled (v:Boolean) :void {			if(_enabled==v) return;			_enabled = v;			initialize();		}				private var myContextMenu:ContextMenu;				private var _offsetChange:Number=0;		public function get offsetChange () :Number {	return _offsetChange;	}				private function deactivateHandler (e:Event) :void {			//setNumber(getNumber());			var val:Number = getNumber();						if(forceRestrict) {				setNumber( val );			}else{				tf.text = String( val );				expressHandler(null);			}						_offsetChange = val-activateValue;						dispatchEvent(new Event(Event.CHANGE));			focusOut();		}				private var activateValue:Number=0;		private function activateHandler (e:Event) :void {			activateValue = getNumber();			focusIn();		}				public function processEnter () :void {			expressHandler(null);		}				public function processEsc () :void {			setNumber(activateValue);		}				public function initialize ():void {					if(tf==null) {				tf = createTextField();				tf.width = 80;				tf.x = 1;				//tf.border = true;				//tf.background = true;				tf.addEventListener(FocusEvent.FOCUS_OUT, deactivateHandler);				tf.addEventListener(FocusEvent.FOCUS_IN, activateHandler);			}						var h:Number = UiCtrl.defaultInputTextFmt.size+4;						//tf.borderColor = UiCtrl.INPUT_BORDER_COLOR;			//tf.backgroundColor = UiCtrl.INPUT_BACKGROUND_COLOR;			tf.textColor = _enabled ? UiCtrl.INPUT_COLOR : UiCtrl.INPUT_DISABLED;			tf.height = h;						if(_enabled) {				tf.type = TextFieldType.INPUT;				if(_textAlign=="left")					tf.defaultTextFormat = UiCtrl.defaultInputTextFmtLeft;				else					tf.defaultTextFormat = UiCtrl.defaultInputTextFmt;			}else{				tf.type = TextFieldType.DYNAMIC;				if(_textAlign=="left")					tf.defaultTextFormat = UiCtrl.disabledInputTextFmtLeft;				else					tf.defaultTextFormat = UiCtrl.disabledInputTextFmt;			}			if(bg==null) bg = new Sprite();			drawInputBg( bg, tf.width, h, roundLeft, displaySlideButton ? false : roundRight );						if(!contains(bg))  addChild(bg);						if(!contains(tf)) addChild( tf );						if(_displaySlideButton) {				if(btn==null) {					btn = new WEButton();				}				btn.label = "";				btn.displayShortcut = false;				btn.setHeight(15);				btn.setWidth(18);				btn.x = tf.x + tf.width;				if(_enabled) {					btn.addEventListener(MouseEvent.MOUSE_DOWN, btnDownHandler );				}else if(btn.hasEventListener(MouseEvent.MOUSE_DOWN)) {					btn.removeEventListener(MouseEvent.MOUSE_DOWN, btnDownHandler );				}				btn.enabled = _enabled;								if(!contains(btn))	addChild( btn );				createIcon();			}else if( btn != null ) {				btn.removeEventListener( MouseEvent.MOUSE_DOWN, btnDownHandler );				if(contains(btn)) removeChild(btn);				btn = null;			}						setupContextMenu();			setNumber(getNumber());		}				public function btnDownHandler (evt:Event):void {			lastX = mouseX;			lastY = mouseY;			activateHandler(null);			stage.addEventListener(MouseEvent.MOUSE_MOVE, btnMoveHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, btnUpHandler);		}				public function btnUpHandler (evt:Event) :void {			stage.removeEventListener(MouseEvent.MOUSE_MOVE, btnMoveHandler);			stage.removeEventListener(MouseEvent.MOUSE_UP, btnUpHandler);			deactivateHandler(null);			dispatchEvent(new Event(Event.CHANGE));		}				public function btnMoveHandler (evt:Event):void {			var n:Number = getNumber();						var dx:Number = (lastX-mouseX);			var dy:Number = (lastY-mouseY);			var d:Number = Math.round(Math.sqrt(dx*dx + dy*dy));			if(dy < 0 || dx > 0) d = -d;						n += d*scaleOffset;			lastX = mouseX;			lastY = mouseY;			setNumber(n);			dispatchEvent(new Event(Event.CHANGE));		}				public function setNumber (val:Number) :void {			if(val > maxValue) val = maxValue;			else if(val < minValue) val = minValue;						var nm:String = StringMath.getNumberAsString(val);			setText( nm );		}				public function getNumber () : Number {			var txt:String = getText();			var rv:Number=0;						switch (unit) {				case UNIT_NONE:					rv = StringMath.evaluate(txt);					break;				case UNIT_PERCENT:					rv = StringMath.evaluate(txt.substring(0,txt.length-(CHAR_PERCENT.length-2)), precision);					break;				case UNIT_SEC:					rv = StringMath.evaluate(txt.substring(0,txt.length-(CHAR_SEC.length-2)), precision);					break;				case UNIT_DEGREE:					rv = StringMath.evaluate(txt.substring(0,txt.length-(CHAR_DEGREE.length-2)), precision);					break;				case UNIT_METRIC:					rv = StringMath.evaluate(txt, precision);					break;			}			return rv;		}				public function getText () : String {			return tf.text;		}				public function setText (nm:String):void {			switch (unit) {				case UNIT_PERCENT:					tf.text = nm + CHAR_PERCENT;					break;				case UNIT_SEC:					tf.text = nm + CHAR_SEC;					break;				case UNIT_DEGREE:					tf.text = nm + CHAR_DEGREE;					break;				case UNIT_METRIC:					tf.text = nm + CHAR_METRIC;					break;				default:					tf.text = nm;					break;			}		}				public override function setWidth (w:int):void {			if(btn != null && _displaySlideButton) {				tf.width = w-btn.width-1;				btn.x = tf.x + tf.width;			}else{				tf.width = w-1;			}			bg.graphics.clear();			drawInputBg( bg, tf.width, tf.height, roundLeft, displaySlideButton ? false : roundRight );		}				public override function getWidth ():int {			if(btn != null) {				Math.round(btn.x + btn.getWidth());			}else if( tf != null ) {				return tf.width;			}			return 0;		}				public override function setHeight (h:int):void {			btn.setHeight( h );			tf.height = h;			bg.graphics.clear();			drawInputBg( bg, tf.width, tf.height, roundLeft, displaySlideButton ? false : roundRight );		}				public override function getHeight ():int {			return _displaySlideButton == true ? Math.max(btn.getHeight(), tf.height) : tf.height;		}				private function createIcon ():void {						if(btn != null && _displaySlideButton) {				if(btn.getChildByName("icon_1_mc") != null) return ;				var ic:Sprite = new NumericInputIcon();				/*				ic.graphics.beginFill(0x282828, 1);				ic.graphics.moveTo( 4, 0);				ic.graphics.lineTo( 0, 4);				ic.graphics.lineTo( 4, 8);				ic.graphics.endFill();								ic.graphics.beginFill(0x282828, 1);				ic.graphics.moveTo( 6, 0);				ic.graphics.lineTo( 11, 4);				ic.graphics.lineTo( 6, 8);				ic.graphics.endFill();				*/								ic.name = "icon_1_mc";				ic.x = Math.round((18-ic.width)/2);				ic.y = Math.round((16-ic.height)/2);				btn.addChild(ic);			}		}				private function setupContextMenu ():void {						try {			myContextMenu = new ContextMenu();            myContextMenu.hideBuiltInItems();			            var defaultItems:ContextMenuBuiltInItems = myContextMenu.builtInItems;            defaultItems.print = false;			            var item:ContextMenuItem = new ContextMenuItem("Express");            myContextMenu.customItems.push(item);            item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, expressHandler);						if(_displaySlideButton) 			{				var item1:ContextMenuItem = new ContextMenuItem("Factor 0.001");				myContextMenu.customItems.push(item1);				item1.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemScale1SelectHandler);								var item2:ContextMenuItem = new ContextMenuItem("Factor 0.01");				myContextMenu.customItems.push(item2);				item2.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemScale2SelectHandler);								var item3:ContextMenuItem = new ContextMenuItem("Factor 0.1");				myContextMenu.customItems.push(item3);				item3.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemScale3SelectHandler);								var item4:ContextMenuItem = new ContextMenuItem("Factor 1");				myContextMenu.customItems.push(item4);				item4.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemScale4SelectHandler);								var item5:ContextMenuItem = new ContextMenuItem("Factor 10");				myContextMenu.customItems.push(item5);				item5.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemScale5SelectHandler);								var item6:ContextMenuItem = new ContextMenuItem("Factor 100");				myContextMenu.customItems.push(item6);				item6.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemScale6SelectHandler);								var item7:ContextMenuItem = new ContextMenuItem("Factor 500");				myContextMenu.customItems.push(item7);				item7.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemScale7SelectHandler);			}			if(btn != null)				btn.contextMenu = myContextMenu;							tf.contextMenu = myContextMenu;			}catch(e:Error) {				trace("Context Menu Error: " 					+ e.name + ": " + e.message)			}		}		        public function expressHandler(event:Event):void {			//setNumber(getNumber());			var nm:String = StringMath.getNumberAsString(getNumber());			setText( nm );        }				private function menuItemScale7SelectHandler(event:ContextMenuEvent):void {            this.scaleOffset = 500;        }		private function menuItemScale6SelectHandler(event:ContextMenuEvent):void {            this.scaleOffset = 100;        }		private function menuItemScale5SelectHandler(event:ContextMenuEvent):void {            this.scaleOffset = 10;        }		private function menuItemScale4SelectHandler(event:ContextMenuEvent):void {            this.scaleOffset = 1;        }		private function menuItemScale3SelectHandler(event:ContextMenuEvent):void {            this.scaleOffset = 0.1;        }		private function menuItemScale2SelectHandler(event:ContextMenuEvent):void {            this.scaleOffset = 0.01;        }		private function menuItemScale1SelectHandler(event:ContextMenuEvent):void {            this.scaleOffset = 0.001;        }	}}