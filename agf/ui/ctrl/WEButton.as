package agf.ui.ctrl {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.text.AntiAliasType;	import flash.text.TextField;	import flash.text.TextFormat;		import agf.ui.ctrl.UiCtrl;
		public dynamic class WEButton extends UiCtrl 	{		public function WEButton () {			initialize();			addEventListener( Event.ADDED, stageAdded);			addEventListener( Event.REMOVED, stageRemoved);		}				private function stageAdded (e:Event) :void {			if(e==null || e.target == this) {				bg_mc.addEventListener(MouseEvent.MOUSE_DOWN, pressHandler);				bg_mc.addEventListener(MouseEvent.MOUSE_OVER, overHandler);				bg_mc.addEventListener(MouseEvent.MOUSE_OUT, outHandler);			}		}				private function stageRemoved (e:Event) :void {			if(e==null || e.target == this) {				bg_mc.removeEventListener(MouseEvent.MOUSE_DOWN, pressHandler);				bg_mc.removeEventListener(MouseEvent.MOUSE_OVER, overHandler);				bg_mc.removeEventListener(MouseEvent.MOUSE_OUT, outHandler);			}		}				public var bgcolor:int=-1;		public var label_tf:TextField;		public var shortcut_tf:TextField;		public var bg_mc:Sprite;		public var labelTextFmt:TextFormat = defaultLabelTextFmt;		public var shortcutTextFmt:TextFormat = defaultShortcutTextFmt;		private var pressed:Boolean=false;		private var _displayShortcut:Boolean = true;		private var shortcutValue:String="";		private var _displayIcon:Boolean =false;		private var _icon:Sprite=null;		public var iconPos:String="Left";		public var iconSpace:Number = 2;		public var swapBackground:Boolean=true;				public function showBg ( b:Boolean ) :void {			bg_mc.alpha = b ? 1:0;		}		public function roundBg ( radius:Number, color:Number=0, alpha:Number=1 ) :void {			bg_mc.graphics.clear();			bg_mc.graphics.beginFill(color, alpha);			bg_mc.graphics.drawCircle(radius,radius,radius);			bg_mc.graphics.endFill();		}				public function get icon () :Sprite {			return _icon;		}		public function set icon (ic:Sprite) :void {			if(ic == _icon) return;						if(_icon != null && contains(_icon)) removeChild( _icon );						if( ic == null) {				_icon = null;				_displayIcon = false;			}else{				_icon = ic;				if(!contains( _icon ) ) addChild( _icon );				_displayIcon = true;			}			setWidth( getWidth() );		}				public function initialize ():void {						if(bg_mc==null) bg_mc = new Sprite();			if(!contains(bg_mc)) addChild( bg_mc );						drawBackground("normal");						var gr:Rectangle = new Rectangle(3,3,94,9);			bg_mc.scale9Grid = gr;						if(label_tf == null) label_tf = createTextField();						label_tf.defaultTextFormat = labelTextFmt;			label_tf.y = textOffsetY;			label_tf.selectable = false;			label_tf.mouseEnabled = false;						if(!contains(label_tf)) addChild( label_tf );						displayShortcut = false;			//setWidth( getWidth());			setHeight(UiCtrl.defaultLabelTextFmt.size+4);		}				public function get shortcut () :String {			return shortcutValue;		}		public function set shortcut (str:String) :void {			if(str == null || str == "") {				shortcutValue = "";				displayShortcut=false;			}else{				shortcutValue = str;				displayShortcut=true;			}			setWidth( getWidth() );		}		public function set displayShortcut (v:Boolean):void {			_displayShortcut = v;			if(v) {				shortcut_tf = new TextField();				shortcut_tf.y = textOffsetY;				shortcut_tf.defaultTextFormat = shortcutTextFmt;				shortcut_tf.selectable = false				shortcut_tf.mouseEnabled = false				shortcut_tf.text = shortcutValue;				shortcut_tf.width = shortcut_tf.textWidth+4;				shortcut_tf.height = defaultShortcutTextFmt.size+4;				addChild( shortcut_tf ); 				//shortcut_tf.visible = true;			}else{				if(shortcut_tf) {					if(contains(shortcut_tf)) removeChild ( shortcut_tf );					shortcut_tf = null;				}				//shortcut_tf.visible = false;				//shortcut_tf.width = 0;			}		}				public function get displayShortcut () :Boolean {			return _displayShortcut;		}				public function overHandler (event:MouseEvent):void {			if(event.target == bg_mc) {				if(!pressed && swapBackground == true) {					drawBackground("over");				}			}		}				public function outHandler (event:MouseEvent):void {			if(event.target == bg_mc) {				if(!pressed && swapBackground == true) {					drawBackground("normal");				}			}		}				public function pressHandler (event:MouseEvent):void {			if(event.target == bg_mc) {				focusIn();				pressed = true;				stage.addEventListener(MouseEvent.MOUSE_UP, releaseHandler);				if(swapBackground == true) {					drawBackground("press");				}			}		}				public function releaseHandler (event:MouseEvent):void {			//if(event.target == bg_mc) {				focusOut();				pressed = false;								if(stage != null && stage.hasEventListener(MouseEvent.MOUSE_UP))					stage.removeEventListener(MouseEvent.MOUSE_UP, releaseHandler);								if(swapBackground == true) {					drawBackground("normal");				}			//}		}				public function drawBackground( state:String="normal", bgcol:int=-1 ) :void {			if(bg_mc != null) {				drawRect(bg_mc, 0, 0, 100, 15, state, bgcol ==-1 ? bgcolor : bgcol);			}		}				public function set label (str:String) :void {	label_tf.text = str;	}		public function get label () : String {		return label_tf.text;	}				public function setWidthByLabel ():void {			var w:int;			if(displayShortcut == true && shortcut_tf != null) {				w = label_tf.textWidth + (shortcut_tf.textWidth || 0) + 8;			}else{				w = label_tf.textWidth+8;			}						if(_displayIcon == true && _icon != null) w += _icon.width+iconSpace*2;			setWidth(w);		}				public override function setWidth (w:int):void {			if(w<minWidth) w = minWidth;			bg_mc.width = w;						var lw:int = w;						if(_displayShortcut == true && shortcut_tf != null) {				lw -= shortcut_tf.width;			}			if(_displayIcon == true && _icon != null) {				lw -= iconSpace*2 + _icon.width;			}						if(lw > 4) {				label_tf.width = lw;			}else{				label_tf.width = 0;			}						if(_displayIcon == true && _icon != null) 			{					var p:String = iconPos.charAt(0).toLowerCase();				if( p == "l" ) {					label_tf.x = _icon.width + iconSpace;					_icon.x = 0;				}else if( p == "r" ) {					label_tf.x = 0;					_icon.x = label_tf.width + iconSpace;				}else{					// Center Icon					label_tf.x = 2;					_icon.x = Math.round(w/2 - _icon.width/2);				}				_icon.y = Math.round(bg_mc.height/2 - _icon.height/2);							}else{				label_tf.x = 2;			}			if(shortcut_tf != null)				shortcut_tf.x = w-shortcut_tf.width;		}				public override function setHeight (h:int):void {			if(h<minHeight) h = minHeight;			bg_mc.height = h+2;			label_tf.height = h+2;			if(shortcut_tf != null) shortcut_tf.height = h;		}				public override function getWidth () :int {			return bg_mc.width;		}		public override function getHeight () :int {			return bg_mc.height;		}		public override function set enabled (v:Boolean) :void {			if(_enabled==v) return;						_enabled = v;						if(_enabled) {				label_tf.defaultTextFormat = UiCtrl.defaultLabelTextFmt;			}else{				label_tf.defaultTextFormat = UiCtrl.disabledLabelTextFmt;			}		}			}}