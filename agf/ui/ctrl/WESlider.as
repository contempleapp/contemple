package agf.ui.ctrl {		import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import agf.ui.ctrl.UiCtrl;	dynamic public class WESlider extends UiCtrl {				/**		* Drag Button top-bottom margin		*/		public var vspace:Number = 1.5;		/**		* Background Drag Button		*/		public var scrollerback:MovieClip;		/**		* Drag Button		*/		public var scroller:MovieClip;		/**		* Minimum value returned by getValue in change handler		*/		public var minValue:Number=0;		/**		* Maximum value returned by getValue in change handler		*/		public var maxValue:Number=100;				private var scroll_way:Number=0;		private var bounds:Rectangle;		private var lastY:Number=0;				public function WESlider () {			initialize();			addEventListener(Event.ADDED, stageAdded);			addEventListener(Event.REMOVED, stageRemoved);		}				private function stageAdded (e:Event) :void {			if(e==null || e.target == this) addStageListener();		}		private function stageRemoved (e:Event) :void {			if(e==null || e.target == this) removeStageListener()		}		private function addStageListener () :void {			scroller.addEventListener(MouseEvent.MOUSE_DOWN, startScrollerDrag);			scrollerback.addEventListener(MouseEvent.MOUSE_DOWN, startBGDrag);			stage.addEventListener(MouseEvent.MOUSE_UP, stopScrollerDrag);		}		private function removeStageListener () :void {			scroller.removeEventListener(MouseEvent.MOUSE_DOWN, startScrollerDrag);			scrollerback.removeEventListener(MouseEvent.MOUSE_DOWN, startBGDrag);			stage.removeEventListener(MouseEvent.MOUSE_UP, stopScrollerDrag);		}				public override function setWidth (w:int) :void {			scroller.width = w-3;			scrollerback.width = w;		}		public override function setHeight (h:int) :void {			var pc:Number = this.getPercentValue();			scrollerback.height = h;			initialize();			this.setPercentValue(pc);		}				public /*override*/ function get totalHeight () :Number {			return scrollerback.height;		}				public function get scrollerHeight () :Number {			return scroller.height;		}				public function initialize () :void {			if(scroller==null)	scroller = new MovieClip();			if(scrollerback == null) scrollerback = new MovieClip();			scroller.x = 1.5;						scroller.graphics.clear();			scrollerback.graphics.clear();						drawRect(scroller, 0, 0, 18, 18, "normal");			drawRect(scrollerback, 0, 0, 20, 100, "over");						var gr1:Rectangle = new Rectangle(4,4,10,10);			scroller.scale9Grid = gr1;						var gr2:Rectangle = new Rectangle(2,2,14,94);			scrollerback.scale9Grid = gr2;						addChild( scrollerback );			addChild( scroller );						scroller.useHandCursor = false;			scrollerback.useHandCursor = false;						scroller.y = vspace;			scroll_way = totalHeight - (scrollerHeight + vspace*2);						bounds = new Rectangle(scroller.x, vspace, 0, (totalHeight-scrollerHeight)-vspace*2);		}				/**		* Set scroller position in percent		* @param	v		* @return		*/		public function setPercentValue (v:Number) :void {			if(v < 0) v = 0;			else if (v > 100) v = 100;			scroller.y = Math.round(vspace + (scroll_way/100 * v));		}				/**		* Set scroller position between min and maxValue		* @return		*/		public function setValue (v:Number) :void {			var p:Number;			var hp:Number;			if( maxValue > minValue) {				if(v < minValue) v = minValue;				else if (v > maxValue) v = maxValue;				p = v-minValue;				hp = maxValue-minValue;				setPercentValue( p/100*(100/hp)*100);			}else{				if(v < maxValue) v = maxValue;				else if (v > minValue) v = minValue;				p = v-maxValue;				hp = minValue-maxValue;				setPercentValue( 100-(p/100*(100/hp)*100) );			}		}				/**		* Returns the value between minValue and maxValue		* @return		*/		public function getValue () :Number {			var pc:Number = getPercentValue()/100;			return minValue + (maxValue-minValue)*pc;		}				/**		* Returns the value in percent		* @return		*/		public function getPercentValue () :Number {			return 100/scroll_way * (scroller.y-vspace);		}				private function startBGDrag (e:Event) :void {			scroller.y = mouseY-scrollerHeight/2;			faderBegin();		}				private function startScrollerDrag (e:Event) :void {			drawRect( scroller, 0, 0, 18, 18, "press" );			faderBegin();			dispatchEvent(new Event(MouseEvent.MOUSE_DOWN));		}				private function stopScrollerDrag (e:Event) :void {			drawRect( scroller, 0, 0, 18, 18, "normal" );			scroller.stopDrag();			scroller.removeEventListener(Event.ENTER_FRAME, frameLoop);			dispatchEvent(new Event(Event.CHANGE));			dispatchEvent(new Event(MouseEvent.MOUSE_UP));		}				private function faderBegin () :void {			scroller.startDrag(false, bounds);			scroller.addEventListener(Event.ENTER_FRAME, frameLoop);		}				private function frameLoop (e:Event) :void {			var my:Number = Math.round(scroller.y);			if(my == lastY) return;			lastY = my;			dispatchEvent(new Event(Event.CHANGE));		}			}}