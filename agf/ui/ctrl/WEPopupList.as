package agf.ui.ctrl{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.utils.getTimer;		import agf.ui.ctrl.UiCtrl;	import agf.ui.ctrl.WEPopup;	import agf.ui.ctrl.WEPopupItem;	import agf.ui.ctrl.WEPopupList;	import agf.icons.*;		public class WEPopupList extends UiCtrl 	{		public function WEPopupList () {			visible = false;			initialize();			var sp:Sprite;			mouseEnabled = true;		}				public static var stateIconW:uint=12;		public static var folderIconW:uint=12;		public static var popup_list_nd:WEPopupListNd;		public static var waitTime:uint = 300;				public var currPopup:WEPopup;		public var currItem:WEPopupItem;		public var stagerect:Rectangle;		public var label_tf:TextField;		public var shortcut_tf:TextField;		public var disabled_tf:TextField;		public var bg_mc:Sprite;		public var lines_mc:Sprite;		public var current_bg:Sprite;		public var current_tf:TextField;		public var mouseOver:Boolean=false;		public var itemHeight:Number = 12;		public var dim_id:int=0;		public var pressTime:int;		public var icons:Array;		public var hasFolderIcon:Boolean = false;		public var hasStateIcon:Boolean = false;		public var hasCustomIconL:Boolean = false;		public var hasCustomIconR:Boolean = false;		public var customIconMaxWidthL:int = 0;		public var customIconMaxWidthR:int = 0;		public var borderTop:int = 6;		public var borderBottom:int = 6;		public var borderLeft:int = 12;		public var borderRight:int = 12;		public var scrollUpIcon:ScrollUpIcon = new ScrollUpIcon();		public var scrollDownIcon:ScrollDownIcon = new ScrollDownIcon();		public var scrollPerFrame:Number=1;				private var currentIsFolder:Boolean = false;		private var interaction_stopped:Boolean = false;		private var maxScrollItem:int=7;		private var scrolling:Boolean=false;		private var isScrolling:Boolean=false;		private var scrollstep:Number=0;				public function initialize () :void {			var gr:Rectangle						if(bg_mc == null) {				bg_mc = new Sprite();
				/*if( UiCtrl.roundRect ) {
					trace("ROUND POUP LIST... ");
					UiCtrl.drawRoundRect( bg_mc, 0,0,100,100, UiCtrl.roundTopLeft, UiCtrl.roundTopRight, UiCtrl.roundBottomLeft, UiCtrl.roundBottomRight);
				}else{*/					drawRect( bg_mc, 0,0,100,100,"normal");
				//}				bg_mc.graphics.endFill();
				if( UiCtrl.roundRect ) 
				{
					var rx:Number = Math.max( UiCtrl.roundTopLeft, UiCtrl.roundBottomLeft);
					var ry:Number = Math.max( UiCtrl.roundTopLeft, UiCtrl.roundTopRight);
					
					trace("RXY: " + rx + ", " + ry);
					
					gr = new Rectangle(rx, ry, 100-rx*2, 100-ry*2);
					
				}else{					gr = new Rectangle(2,2,96,96);
				}				bg_mc.scale9Grid = gr;				addChild(bg_mc);			}			if(lines_mc == null) {				lines_mc = new Sprite();				addChild(lines_mc);			}			if(disabled_tf == null) {				disabled_tf = createTextField();				disabled_tf.selectable = false;				disabled_tf.defaultTextFormat = defaultLabelTextFmt;				disabled_tf.textColor = DISABLED_COLOR;				addChild( disabled_tf );			}			if(label_tf == null) {				label_tf = createTextField();				label_tf.selectable = false;				label_tf.defaultTextFormat = defaultLabelTextFmt;				addChild( label_tf );			}			if(current_bg == null) {				current_bg = new Sprite();				current_bg.graphics.lineStyle();				current_bg.graphics.beginFill(0x242424,1);				current_bg.graphics.drawRect(0,0,100,Number(UiCtrl.defaultLabelTextFmt.size));				current_bg.graphics.endFill();				addChild(current_bg);			}			if(shortcut_tf == null) {				shortcut_tf = createTextField();				shortcut_tf.selectable = false;				shortcut_tf.defaultTextFormat = defaultShortcutTextFmt;				addChild( shortcut_tf );			}			if(current_tf == null) {				current_tf = createTextField();				current_tf.x = 0;				current_tf.selectable = false;				current_tf.defaultTextFormat = defaultInfoTextFmt;				current_tf.textColor = 0xe0e0e0;				addChild( current_tf );			}						label_tf.autoSize = TextFieldAutoSize.LEFT;			shortcut_tf.autoSize = TextFieldAutoSize.RIGHT;			disabled_tf.autoSize = TextFieldAutoSize.RIGHT;						label_tf.multiline = true;			shortcut_tf.multiline = true;			disabled_tf.multiline = true;			current_tf.multiline = true;						label_tf.wordWrap = false;			shortcut_tf.wordWrap = false;			current_tf.wordWrap = false;		}					public function removeAllClips () :void {			if(icons != null && icons.length > 0) {				var L:int = icons.length;				for(var i:int=0; i<L; i++) {					removeChild(icons[i]);				}			}			icons = [];		}				public function createList (ppInst:WEPopup, ppItem:WEPopupItem) :Boolean {						removeAllClips();						if(ppItem == null || ppItem.items == null || ppItem.items.length == 0) return false;						currPopup = ppInst;			currItem = ppItem;						var new_line:String = "\n";			var it:Array = ppItem.items;						var labelText:String="";			var shortcutText:String = "";			var disabledText:String="";						current_tf.text = "ABCD";			current_tf.autoSize = TextFieldAutoSize.LEFT;			itemHeight = current_tf.height-4;						current_tf.text = "";						var iconsL1:Array = [];			var iconsL2:Array = [];			var iconsR1:Array = [];			var iconsR2:Array = [];						var pit:WEPopupItem;			var ic:Sprite;						hasFolderIcon = false;			hasStateIcon = false;			hasCustomIconL = false;			hasCustomIconR = false;						customIconMaxWidthL = 0;			customIconMaxWidthR = 0;						var msi:int = int(currPopup.maxScrollHeight/itemHeight);			maxScrollItem = msi;						var itemLen:int = it.length;						var L:int = ppItem.scrollStart + maxScrollItem;			if(L > it.length) L = it.length;						var iy:int=0;			// stored sparators			var lines:Array = [];						for(var i:int=ppItem.scrollStart; i<L; i++) {								pit = it[i];				iy = int((i-ppItem.scrollStart)*itemHeight)+borderTop;								if(pit.label == KEY_SEPARATOR) {					lines.push( iy );					shortcutText += new_line;					labelText += new_line;					disabledText += new_line;				}else{					shortcutText += pit.shortcut + new_line;					labelText += pit.label + new_line;					if(pit.disabled == true) {						disabledText += pit.label;					}					disabledText += new_line;				}				if(pit.hasChilds()) {					icons.push(new PopupFolderIcon());					ic = icons[icons.length-1];					iconsR2.push(ic);					addChild(icons[icons.length-1]);					ic.y = iy+1;					hasFolderIcon = true;				}				if(pit.iconL != null) {					icons.push(pit.iconL);					addChild(icons[icons.length-1]);					ic = icons[icons.length-1];					iconsL2.push(ic);					ic.y = iy+1;					if(ic.width > customIconMaxWidthL) customIconMaxWidthL = ic.width;					hasCustomIconL = true;				}				if(pit.iconR != null) {					icons.push(pit.iconR);					addChild(icons[icons.length-1]);					ic = icons[icons.length-1];					iconsR1.push(ic);					ic.y = iy+1;					if(ic.width > customIconMaxWidthR) customIconMaxWidthR = ic.width;					hasCustomIconR = true;				}				if(pit.stateButton) {					if(pit.selected) {						icons.push(new StateIconSelected());					}else{						icons.push(new StateIconUnselected());					}					addChild(icons[icons.length-1]);					ic = icons[icons.length-1];					iconsL1.push(ic);					ic.y = iy+1;					hasStateIcon = true;				}				}						shortcut_tf.text = shortcutText;			disabled_tf.text = disabledText;			label_tf.text = labelText;						var w:int = borderLeft + label_tf.width + shortcut_tf.width;						if(hasStateIcon) {				w += stateIconW;				for(i=0; i<iconsL1.length; i++) {					ic = iconsL1[i];					ic.x = borderLeft+1;					ic.y += 1+int((itemHeight-ic.height)/2);				}			}			if(hasCustomIconL) {				for(i=0; i<iconsL2.length; i++) {					ic = iconsL2[i];					ic.x = borderLeft + (hasStateIcon?stateIconW:0) + ((customIconMaxWidthL-ic.width)/2);					ic.y += 1+int((itemHeight-ic.height)/2);				}				w += customIconMaxWidthL;			}			if(hasCustomIconR) {				for(i=0; i<iconsR1.length; i++) {					ic = iconsR1[i];					ic.x = w;					ic.y += 1+int((itemHeight-ic.height)/2);				}				w += customIconMaxWidthR;			}						if(hasFolderIcon) {				for(i=0; i<iconsR2.length; i++) {					ic = iconsR2[i];					ic.x = w+1;					ic.y += 1+int((itemHeight-ic.height)/2);				}				shortcut_tf.x = w;				w += folderIconW;			}else{				shortcut_tf.x = w-shortcut_tf.width;			}						w += borderRight;						// draw separator lines			lines_mc.graphics.clear();			if(lines.length > 0) {				for(i=0; i<lines.length; i++) {					iy = lines[i] + 8;					lines_mc.graphics.lineStyle( 1, UiCtrl.SHADOW_COLOR, UiCtrl.SHADOW_ALPHA );					lines_mc.graphics.moveTo( 1, iy );					lines_mc.graphics.lineTo( w-2, iy );										iy++;					lines_mc.graphics.lineStyle( 1, UiCtrl.LIGHT_COLOR, UiCtrl.LIGHT_ALPHA );					lines_mc.graphics.moveTo( 1, iy );					lines_mc.graphics.lineTo( w-2, iy );				}			}						setWidth(w);			setHeight(label_tf.height + borderTop + borderBottom);						if(msi >= itemLen) {				// No Scrolling required				if(contains(scrollUpIcon)) removeChild(scrollUpIcon);				if(contains(scrollDownIcon)) removeChild(scrollDownIcon);				scrolling = false;			}else{				// Need Scroll				if(!contains(scrollUpIcon)) addChild(scrollUpIcon);				if(!contains(scrollDownIcon)) addChild(scrollDownIcon);								scrollDownIcon.y = label_tf.y + label_tf.height;				scrollUpIcon.y   = label_tf.y - scrollUpIcon.height;								scrollDownIcon.x = w/2 - scrollDownIcon.width;				scrollUpIcon.x   = w/2 - scrollUpIcon.width;				scrolling = true;								scrollUpIcon.visible = true;				scrollDownIcon.visible = true;								if(ppItem.scrollStart==0) {					scrollUpIcon.visible = false;				}else if(ppItem.scrollStart==currItem.items.length-maxScrollItem) {					scrollDownIcon.visible = false;				}			}						if(!hasEventListener(MouseEvent.MOUSE_MOVE)) addEventListener(MouseEvent.MOUSE_MOVE, moveHandler);						return true;		}				public function set opened (v:Boolean) :void {}		public function get opened () :Boolean { return visible == true; }				public function showList (px:*=undefined, py:*=undefined, scrollStart:int=-1) :void {			pressTime = getTimer();			visible = true;			current_bg.visible = false;			current_tf.visible = false;						currItem.opened = true;						if(scrollStart>=0) currItem.scrollStart = scrollStart;						if(px != undefined) x = px;			if(py != undefined) y = py;						alignList(stagerect, px == undefined, py == undefined);			parent.setChildIndex( this, parent.numChildren-1 );			currentIsFolder = false;						selectCurrent();						addEventListener(MouseEvent.MOUSE_DOWN, pressHandler);			addEventListener(MouseEvent.MOUSE_UP, clickHandler);			addEventListener(MouseEvent.MOUSE_OVER, overHandler);			addEventListener(MouseEvent.MOUSE_OUT, outHandler);			addEventListener(Event.ENTER_FRAME, enterFrameHandler);			addEventListener(MouseEvent.MOUSE_MOVE, moveHandler);		}				public function alignList (rect:Rectangle, alignX:Boolean=true, alignY:Boolean=true) :void {						var ypos:Number;						if(alignY) {				if(currItem.sel_id >= 0) {					ypos = parent.mouseY - int(currItem.sel_id*itemHeight + itemHeight/2 +borderTop);				}else{					ypos = parent.mouseY;				}				y = ypos;			}						if(alignX) {				x = parent.mouseX - width/1.4;			}						if(x<rect.x) x = rect.x;			else if((x+width) > (rect.width+rect.x)) {				x = (rect.width+rect.x) - width;			}						if(y<rect.y) y = rect.y;			else if((y+height) > (rect.height+rect.y)) y = (rect.height+rect.y) - height;		}				public function selectCurrent () :void {						var id:Number = currItem.scrollStart + int((mouseY-borderTop)/itemHeight);			var sit:WEPopupItem = currItem;						if(id < currItem.scrollStart || id >= sit.items.length || id >= (currItem.scrollStart + maxScrollItem)) {				currItem.sel_id = -1;				current_bg.visible = false;				current_tf.visible = false;				return;			}						if(id == currItem.sel_id) return;						if(currentIsFolder) {				popup_list_nd.closeChilds(dim_id);			}						if(id >= 0 && id < sit.items.length && sit.items[id] != null) {				var lbl:String  =  sit.items[id].label;								if(lbl == KEY_SEPARATOR || sit.items[id].disabled == true) {					current_bg.visible = false;					current_tf.visible = false;					currItem.sel_id = -1;					currentIsFolder=false;				}else{					current_tf.text = lbl;					current_tf.y = (id-currItem.scrollStart)*itemHeight + borderTop;					current_bg.y = current_tf.y+1.5;										currItem.sel_id = id;										if(sit.items[id].hasChilds()) {						popup_list_nd.showList(currPopup, sit.items[id]);						currentIsFolder=true;					}else currentIsFolder=false;										current_bg.visible = true;					current_tf.visible = true;				}			}else{				currItem.sel_id = -1;				current_bg.visible = false;				current_tf.visible = false;				currentIsFolder=false;			}		}				public function stopInteraction () :void {			interaction_stopped = true;			removeEventListener(MouseEvent.MOUSE_DOWN, pressHandler);			removeEventListener(MouseEvent.MOUSE_UP, clickHandler);			removeEventListener(MouseEvent.MOUSE_OUT, outHandler);		}				public function startInteraction () :void {			interaction_stopped = false;			addEventListener(MouseEvent.MOUSE_DOWN, pressHandler);			addEventListener(MouseEvent.MOUSE_UP, clickHandler);			addEventListener(MouseEvent.MOUSE_OUT, outHandler);		}				public function removeList () :void {			visible = false;			currItem.opened = false;			scrolling = false;			isScrolling = false;						removeEventListener(MouseEvent.MOUSE_DOWN, pressHandler);			removeEventListener(MouseEvent.MOUSE_UP, clickHandler);			removeEventListener(MouseEvent.MOUSE_OVER, overHandler);			removeEventListener(MouseEvent.MOUSE_OUT, outHandler);			removeEventListener(MouseEvent.MOUSE_MOVE, moveHandler);			removeEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function enterFrameHandler (event:Event) :void {			if(isScrolling) {				var currscroll:Number = currItem.scrollStart;				var nextscroll:Number = currscroll + scrollstep;								scrollUpIcon.visible = true;				scrollDownIcon.visible = true;								if(nextscroll >= (currItem.items.length-maxScrollItem)) {					currItem.scrollStart = currItem.items.length - maxScrollItem;					scrollDownIcon.visible = false;					if(currscroll != currItem.scrollStart)						createList(currPopup, currItem);										}else if(nextscroll <= 0) {					currItem.scrollStart = 0;					scrollUpIcon.visible = false;					if(currscroll != 0)						createList(currPopup, currItem);				}else{					currItem.scrollStart = nextscroll;					if(currscroll != currItem.scrollStart)						createList(currPopup, currItem);				}			}		}				private function moveHandler (event:MouseEvent) :void {			if(mouseOver) {				selectCurrent();			}			// ? Scroll			isScrolling = false;						if(scrolling) 			{				var my:Number = mouseY;				if( my >= scrollDownIcon.y ) {					isScrolling = true;					scrollstep = scrollPerFrame;				}else if( my <= scrollUpIcon.y+scrollUpIcon.height ) {					isScrolling = true;					scrollstep = -scrollPerFrame;				}			}		}				private function overHandler (event:MouseEvent) :void {			if(mouseOver == true) return;			mouseOver = true;			currPopup.mouseIsOver = true;			if(interaction_stopped) {				startInteraction();			}		}				private function outHandler (event:MouseEvent) :void {			if(mouseOver==false) return;			mouseOver = false;			currPopup.mouseIsOver = false;			if(!interaction_stopped) {				stopInteraction();			}		} 				private function pressHandler (event:MouseEvent) :void {			currPopup.closeList(currItem);		}				private function clickHandler (event:MouseEvent) :void {			if(getTimer()-pressTime > waitTime) {				currPopup.closeList(currItem);			}		}				public function set label (str:String) :void {	label_tf.text = str;	}		public function get label () :String {		return label_tf.text;	}				public override function setWidth (w:int):void {			if(w<minWidth) w = minWidth;						bg_mc.width = w;						current_tf.width = label_tf.width;			current_bg.width = w-4;			current_bg.x = 2;						label_tf.x = borderLeft;			shortcut_tf.x = borderLeft + label_tf.width+2;						if(hasStateIcon) {				label_tf.x += stateIconW;				shortcut_tf.x += stateIconW;			}						if(hasCustomIconL) {				label_tf.x += customIconMaxWidthL;				shortcut_tf.x += customIconMaxWidthL;			}			if(hasCustomIconR) {				shortcut_tf.x += customIconMaxWidthR;			}			if(hasFolderIcon) {				shortcut_tf.x += folderIconW;			}			current_tf.x = label_tf.x;			disabled_tf.x = label_tf.x+1;			disabled_tf.y = label_tf.y+1;		}		public override function getWidth () :int {	return bg_mc.width;	}				public override function getHeight () :int { return bg_mc.height; }		public override function setHeight (h:int) :void {			if(h<minHeight) h = minHeight;			var tfh:uint = h-(borderTop+borderBottom);			bg_mc.height = h;			label_tf.height = tfh;			shortcut_tf.height = tfh;			label_tf.y = borderTop;			shortcut_tf.y = borderTop;		}			}}